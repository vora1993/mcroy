<?php
$title = "Reset Password";
$this->headTitle($title);
?>
<div id="page-title">
    <h2><?php echo $title; ?></h2>
</div>

<div class="main">
    <div class="container">
        <div class="row margin-bottom-40">
            <div class="col-md-12 text-center">
                <div class="content-page">
                    <h1><?php echo $title ?></h1>
                            <!-- BEGIN FORM-->
                        <form action="<?php echo $this->url("user", array("action" => "reset-password")) ?>" id="form_user" class="form-horizontal form-bordered">
                            <div class="form-body">
                                <div class="form-group">
                                    <label class="control-label col-md-3"><?php echo $this->translate("Password") ?><span class="required"> * </span></label>
                                    <div class="col-md-6">
                                        <input type="password" name="password" data-required="1" class="form-control" id="password" value="" /> 
                                    </div>
                                </div>
                                
                                <div class="form-group">
                                    <label class="control-label col-md-3"><?php echo $this->translate("Password Verify") ?><span class="required"> * </span></label>
                                    <div class="col-md-6">
                                        <input type="password" name="passwordVerify" data-required="1" class="form-control" value="" /> 
                                    </div>
                                </div>
                            </div>
                            <div class="form-actions">
                                <div class="row">
                                    <div class="col-md-offset-3 col-md-9">
                                        <button type="submit" class="btn dark"><i class="fa fa-check"></i> <?php echo $this->translate("Submit") ?></button>
                                        <button type="button" class="btn btn-outline" onclick="cancel('/')"><?php echo $this->translate("Cancel") ?></button>
                                    </div>
                                </div>
                            </div>
                        </form>
                        <!-- END FORM-->
                </div>
            </div>
        </div>
    </div>
</div>
<?php
$offStyle = 12;
$offScript = 10;
$this->inlineScript()->offsetSetFile($offScript++, $this->basePath('assets/plugins/jquery-validation/js/jquery.validate.min.js'));
$this->inlineScript()->offsetSetFile($offScript++, $this->basePath('assets/plugins/jquery-validation/js/additional-methods.min.js'));
$this->inlineScript()->offsetSetFile(100, $this->basePath('assets/js/custom_functions.js'));
$this->inlineScript()->captureStart();
echo <<<JS
var form = $('#form_user');
form.validate({
    errorElement: 'span', //default input error message container
    errorClass: 'help-block', // default input error message class
    focusInvalid: false, // do not focus the last invalid input
    ignore: "",
    rules: {
        password: {
            required: true,
            minlength: 6    
        },
        passwordVerify: {
            required: true,
            equalTo: "#password"
        }
    },
    
    highlight: function(element) { // hightlight error inputs
        $(element)
            .closest('.form-group').addClass('has-error'); // set error class to the control group
    },

    success: function(label) {
        label.closest('.form-group').removeClass('has-error');
        label.remove();
    },

    errorPlacement: function(error, element) {
        error.insertAfter(element);
    },

    submitHandler: function (form) {
        // setup some local variables
        var form = $(form);
        
        // let's select and cache all the fields
        var inputs = form.find("input, select, button, textarea");
        
        // serialize the data in the form
        var serializedData = form.serialize();
    
        // let's disable the inputs for the duration of the ajax request
        inputs.prop("disabled", true);
        
        // fire off the request to /form.php

        request = $.ajax({
            url: form.attr("action"),
            type: "post",
            data: serializedData
        });
        
        // Clear Message
        $('#form_user .form-group').removeClass('has-error');
        $('#form_user .help-block, #form_user .alert').remove();
        
        // callback handler that will be called on success
        request.done(function (response, textStatus, jqXHR) {
            var result = $.parseJSON(response);
            if(result.success) {
                toastr.success(result.msg);
                setTimeout(function(){ window.location.href = full_url; }, 1500);
            } else {
                toastr.warning(result.msg);
            }
        });
        
        // callback handler that will be called on failure
        request.fail(function (jqXHR, textStatus, errorThrown) {
            // log the error to the console
            toastr.error("The following error occured: " + textStatus, errorThrown);
        });
        
        // callback handler that will be called regardless
        // if the request failed or succeeded
        request.always(function () {
            // reenable the inputs
            inputs.prop("disabled", false);
        });
    }
});
JS;
$this->inlineScript()->captureEnd();
?>
