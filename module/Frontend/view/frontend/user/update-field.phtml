<?php
$title = "User update field";
$this->headTitle($title);
?>
<div class="container">
    <div class="page-content-inner">
        <div class="row">
            <div class="col-md-12">
                <div class="profile-content">
                    <div class="row">
                        <div class="col-md-12">
                            <div class="portlet light">
                                <div class="portlet-title text-center">
                                    <h1><?php echo $title ?></h1>
                                </div>
                                <div class="portlet-body form">
                                    <!-- BEGIN FORM-->
                                    <form action="<?php echo $this->url("frontend_user", array("action" => "update-field")) ?>" id="form_user" class="form-horizontal">
                                        <div class="form-body">
                                            <div class="form-group">
                                                <label class="control-label col-md-3"><?php echo $this->translate("Phone") ?><span class="required"> * </span></label>
                                                <div class="col-md-6">
                                                    <input type="text" name="phone" class="form-control" value="<?php echo $this->user->getPhone() ?>"<?php echo $this->user->getPhone()  ? ' readonly="true"' : ''; ?> /> 
                                                </div>
                                            </div>
                                            <div class="form-group">
                                                <label class="control-label col-md-3"><?php echo $this->translate("Referral code") ?></label>
                                                <div class="col-md-6">
                                                    <div class="input-group">
                                                        <input type="text" name="ref" class="form-control" value="<?php echo $this->user->getRef() ?>"<?php echo $this->user->getRef() ? ' readonly="true"' : ''; ?> /> 
                                                        <span class="input-group-btn">
                                                            <button id="genpassword" class="btn dark" type="button">
                                                                <i class="fa fa-arrow-left fa-fw"></i> <?php echo $this->translate("Random") ?></button>
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        </div>
                                        <div class="form-actions">
                                            <div class="form-group">
                                                <div class="col-md-offset-3 col-md-9">
                                                    <button type="submit" class="btn dark"><?php echo $this->translate("Submit") ?></button>
                                                    <button type="button" class="btn btn-outline" onclick="cancel('user')"><?php echo $this->translate("Cancel") ?></button>
                                                </div>
                                            </div>
                                        </div>
                                    </form>
                                    <!-- END FORM-->
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>            
</div>
<?php
$offStyle = 12;
$offScript = 10;
$this->headLink()->offsetSetStylesheet($offStyle++, $this->basePath('assets/css/profile.css'));
$this->inlineScript()->offsetSetFile($offScript++, $this->basePath('assets/plugins/jquery-validation/js/jquery.validate.min.js'));
$this->inlineScript()->offsetSetFile($offScript++, $this->basePath('assets/plugins/jquery-validation/js/additional-methods.min.js'));
$this->inlineScript()->offsetSetFile(100, $this->basePath('assets/js/custom.js'));
$this->inlineScript()->captureStart();
echo <<<JS
$("#genpassword").on("click", function() {
    var randomstring = Math.random().toString(36).slice(-8);
    $("input[name=ref]").val(randomstring);
});

var form = $('#form_user');
form.validate({
    errorElement: 'span', //default input error message container
    errorClass: 'help-block', // default input error message class
    focusInvalid: false, // do not focus the last invalid input
    ignore: "",
    rules: {
        phone: {
            required: true
        }
    },
    
    highlight: function(element) { // hightlight error inputs
        $(element)
            .closest('.form-group').addClass('has-error'); // set error class to the control group
    },

    success: function(label) {
        label.closest('.form-group').removeClass('has-error');
        label.remove();
    },

    errorPlacement: function(error, element) {
        error.insertAfter(element);
    },

    submitHandler: function (form) {
        // setup some local variables
        var form = $(form);
        
        // let's select and cache all the fields
        var inputs = form.find("input, select, button, textarea");
        
        // serialize the data in the form
        var serializedData = form.serialize();
    
        // let's disable the inputs for the duration of the ajax request
        inputs.prop("disabled", true);
        
        // fire off the request to /form.php

        request = $.ajax({
            url: form.attr("action"),
            type: "post",
            data: serializedData
        });
        
        // Clear Message
        $('#form_user .form-group').removeClass('has-error');
        $('#form_user .help-block, #form_user .alert').remove();
        
        // callback handler that will be called on success
        request.done(function (response, textStatus, jqXHR) {
            var result = $.parseJSON(response);
            if(result.success) {
                toastr.success(result.msg);
                if(result.redirect) window.location.href = result.redirect;
            } else {
                toastr.error(result.msg);
            }
        });
        
        // callback handler that will be called on failure
        request.fail(function (jqXHR, textStatus, errorThrown) {
            // log the error to the console
            toastr.error("The following error occured: " + textStatus, errorThrown);
        });
        
        // callback handler that will be called regardless
        // if the request failed or succeeded
        request.always(function () {
            // reenable the inputs
            inputs.prop("disabled", false);
        });
    }
});
JS;
$this->inlineScript()->captureEnd();
?>